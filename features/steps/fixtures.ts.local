import { test as base, createBdd } from 'playwright-bdd';
import { createLogger, format, transports } from 'winston';
import { TodoPage } from './TodoPage';
import { expect } from '@playwright/test';

const logger = createLogger({
    level: 'info',
    format: format.combine(
        format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
        format.printf(({ timestamp, level, message }) => `${timestamp} [${level}]: ${message}`)
    ),
    transports: [
        new transports.Console(),
        new transports.File({ filename: 'logs/test.log' }),
    ],
});

export default logger;


type Fixtures = {
  // set types of your fixtures

};


export const test = base.extend<{ todoPage: TodoPage,}>({
  todoPage: ({ page }, use) => use(new TodoPage(page)),
  });

export const { Given, When, Then, Before, After, BeforeAll, AfterAll } = createBdd(test);

export { expect } from "@playwright/test" 

BeforeAll(async function ({ }) {
  
  logger.info('from logger'+  test.info())
});

Before(async function ({ }) {
  logger.info('from logger'+ test.info())
});

After(async function ({ }) {
  console.log('In After ')
});


AfterAll(async function ({ }) {
  console.log('In After ALL')
});



// import { chromium, Browser, Page } from 'playwright';

// let browser: Browser;
// let page: Page;

// export const hooks = {
//   beforeAll: async () => {
//     browser = await chromium.launch({ headless: true });
//     console.log('Browser launched');
//   },

//   beforeEach: async () => {
//     const context = await browser.newContext();
//     page = await context.newPage();
//     console.log('New page created');
//   },

//   afterEach: async () => {
//     await page.close();
//     console.log('Page closed');
//   },

//   afterAll:async () => {
//     await page.close();
//     console.log('Page closed');
//   }

// }